#!/usr/bin/env python3

# rainbow 
#
# Copyright (C) 2020 Adrian Carpenter (adrian@nedrysoft.com)
# 
# Permission is hereby granted, free of charge, to any person obtaining a 
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# Tool for extracting functions, variables, registers and ports on ZX Spectrum/ZX Spectrum Next sources & documents.
#
# Creates a JSON document which can then be used to produce custom files such as:
#
# * assembler include files.
# * C header files.
# * Developer documentation.
#
# Links:
# 
# * https://www.specnext.com
# * https://github.com/ZXSpectrumVault/rom-disassemblies
# * https://gitlab.com/thesmog358/tbblue/
# * https://gitlab.com/SpectrumNext/ZX_Spectrum_Next_FPGA/
#
# This project would not be possible without the hard work of the developers who have documented 
# the original ZX Spectrum ROM's and those who have produced documentation for the ZX Spectrum Next.


import json
import sys
import pdftotext
import re
import argparse
import subprocess
import os
import datetime

def parsePlus3Source(filename, arch, source):
	functionTable = []

	header_match = re.compile(r"(?i)^;(\s*)The DOS routines jump block(\s*)$")
	function_match = re.compile(r"(?i)^\.l(?P<address>[0-9|a-f]*)(.*);(\s*)(?P<name>.*)(\s*)$")

	try:
		with open(filename) as fp:
			line = fp.readline()
			
			lines = []

			while line:
				line = fp.readline()

				m = header_match.match(line)

				if m:
					while line:
						line = fp.readline()

						m = function_match.match(line)

						if m:
							break;

					while(line):
						m = function_match.match(line)

						if not m:
							break

						newEntry = {}

						newEntry["name"] = m.group('name').upper()
						newEntry["address"] = "{0:#0{1}x}".format(int(m.group('address'), 16),6)

						functionTable.append(newEntry)

						line = fp.readline()

			fp.close()
	except:
		print("Error: Unable to load "+filename+", skipping. [Parse +3 Functions]", file=sys.stderr)

	return [{"arch":arch, "source:":source, "functions":functionTable}]

def parseSource(filename, arch, startAtAddress, source):
	functionTable = []

	label_match = re.compile(r"(?i)^L(?P<hex>[0-9|a-f]*):.*$")
	description_match = re.compile(r"(?i)^;;(\s*)(?P<name>[a-z|0-9|_|-]*)(\s*)$")
	comment_match = re.compile(r"(?i)^;(\s*)(\-*)$")

	ignore_matches = []

	ignore_matches.append(re.compile(r"(?i)^\(offset\:(\s*)\$([0-9|a-f]*)(.*)\)$"))
	ignore_matches.append(re.compile(r"(?i)^\(offset(\s*)\$([0-9|a-f]*)\:(.*)\)$"))

	try:
		with open(filename) as fp:
			line = fp.readline()
			
			lines = []

			while line:
				line = fp.readline()

				lines.append(line)

				m = description_match.match(line)
				
				if m:
					name = m.group('name')

					description = []

					for previousLine in reversed(lines[0:-1]):

						m = comment_match.match(previousLine)

						if m:
							break

						description.append(previousLine)

					label = fp.readline()

					m = label_match.match(label)

					if m:
						address = m.group('hex')

						newEntry = {}

						newEntry["name"] = name.upper()
						newEntry["address"] = "{0:#0{1}x}".format(int(address, 16),6)

						commentBlock = ""

						for commentLine in reversed(description):
							commentIndex = commentLine.find(";")

							if (not commentIndex == -1):
								commentLine = commentLine[commentIndex+1:].lstrip().rstrip();

								ignoreLine = False

								for match in ignore_matches:
									m = match.match(commentLine)

									if m:
										ignoreLine = True
										break

								if ignoreLine==False:
									commentBlock += commentLine+"\n"

						newEntry["description"] = commentBlock

						if (int(address,16)>=startAtAddress):
							functionTable.append(newEntry)

					lines = []

					while line:
						line = fp.readline()

						m = comment_match.match(line)

						if m:
							break
			fp.close()

	except:
		print("Error: Unable to load "+filename+", skipping. [Parse Functions]", file=sys.stderr)

	return [{"arch":arch, "source:":source, "functions":functionTable}]

def parseNextDoc(filename, arch, source):
	functionTable = []

	with open(filename, "rb") as fp:
		pdf = pdftotext.PDF(fp)

		pageLines = []

		api_table_match = re.compile(r"(?i)^(?P<status>[*\|\%]*)(?P<name>[A-Z|0-9|_]+)(\s*)\(\$(?P<address>[0-9|a-f]*)\)(\s*)(?P<description>.*)$")
		api_match_1 = re.compile(r"(?i)^(?P<hex>[0-9|a-f]*)h(\s*)\((?P<dec>[0-9]*)\)$")
		api_match_2 = re.compile(r"(?i)^(?P<name>[a-z|_]*)(\s*)\(\$(?P<hex>[0-9|a-f]*)\)$")
		api_match_3 = re.compile(r"(?i)^;(\s*)\*\s(?P<name>[a-z|_]*)\s\(\$(?P<hex>[0-9|a-f]*)\)(\s*)\*$")

		for page in pdf:
			pageLines += page.splitlines()[:-2]

		previousLines = []

		# find and parse the API table (gives us information on new or modified calls)

		apiTable = []

		for line in pageLines:
			m = api_table_match.match(line)

			if m:
				apiEntry = {
					"status": m.group("status"),
					"name": m.group("name"),
					"address": m.group("address"),
					"description": m.group("description")
				}

				apiTable.append(apiEntry)

		#print(apiTable)

		# find each api function section

		for line in pageLines:
			m = api_match_1.match(line)

			hexValue = None
			functionName = None

			if m:
				hexValue = m.group('hex');
				functionName = previousLines[-1];

				previousLines = []
			else:
				m = api_match_2.match(line)

				if m:
					functionName = m.group('name');
					hexValue = m.group('hex');
				else:
					m = api_match_3.match(line)
					if m:
						functionName = m.group('name');
						hexValue = m.group('hex');

			if hexValue and functionName:
				newEntry = {}

				newEntry["name"] = functionName.upper()
				newEntry["address"] = "{0:#0{1}x}".format(int(hexValue, 16),6)

				functionTable.append(newEntry)

			previousLines.append(line)

		fp.close()

	return [{"arch":arch, "source:":source, "functions":functionTable}]

def parseSystemVariables(filename):
	variablesTable = []

	sysvars_match = re.compile(r"(?i)^(\s*)defc(\s*)(?P<name>[A-Z|0-9|_]*)=\$(?P<address>[0-9|a-f]*)(\s*)((;(\s*)(?P<comment>.*)$)|$)")
	plus3dos_match = re.compile(r"(?i)^(\s*)\;(\s*)\+3DOS routine addresses(\s*)$")

	try:
		with open(filename) as fp:
			line = fp.readline()

			while line:
				m = plus3dos_match.match(line)

				if m:
					break

				m = sysvars_match.match(line)

				if m:
					entry = {
						"name" : m.group("name"),
						"address" : "{0:#0{1}x}".format(int(m.group('address'), 16),6)
					}

					if (m.group("comment") is not None):
						entry["comment"] = m.group("comment");

					variablesTable.append(entry)

				line = fp.readline()

			fp.close()

	except:
		print("Error: Unable to load "+filename+", skipping. [Parse System Variables]", file=sys.stderr)

	return variablesTable

def parseNextRegs(filename):
	registerTable = []

	register_match = re.compile(r"(?i)^0x(?P<hex>[0-9|A-F]*)(\s*)\(([0-9]*)\)(\s*)=>(\s*)(?P<name>.*)(\s*)$")

	try:
		with open(filename) as fp:
			line = fp.readline()

			while line:
				m = register_match.match(line)

				if m:
					entry = {
						"name": m.group('name'), 
						"address" : "{0:#0{1}x}".format(int(m.group('hex'), 16),6)
					}

					registerTable.append(entry)

				line = fp.readline()

			fp.close()
	except:
		print("Error: Unable to load "+filename+", skipping. [Parse Next Registers]", file=sys.stderr)

	return registerTable

def parseNextPorts(filename):
	tempPortsTable = []
	portsTable = []
	lines = []

	port_match = re.compile(r"(?i)^(\s*)\|(?P<read>[\*|\ ])\|(?P<write>[\*|\ ])\|\|(?P<d>([X|0|1]{4}))(\s*)(?P<c>([X|0|1]{4}))(\s*)(?P<b>([X|0|1]{4}))(\s*)(?P<a>([X|0|1]{4}))\|(\s*)0x(?P<address>[0-9|a-f| ]{4})(\s*)\|(?P<description>.*)\|(.*)$")

	try:
		with open(filename) as fp:
			for line in fp:
				lines.append(line)

			fp.close()
	except:
		print("Error: Unable to load "+filename+", skipping. [Parse Next Ports]", file=sys.stderr)
		return portsTable

	# parse the table to get a list of ports, we can use this to verify all registers have been processed

	for line in lines:
		m = port_match.match(line)

		if m:
			entry = {
				"description": m.group('description').rstrip(), 
				"address" : "{0:#0{1}x}".format(int(m.group('address'), 16),6)
			}


			tempPortsTable.append(entry)

	# now parse the document extracting as much as we can

	port_match = re.compile(r"(?i)^0x(?P<address>[0-9|a-f]{2,4})\ (?P<name>.*)$")
	access_match = re.compile(r"^\((?P<access>R|W|R\/W)\).*")
	bit_match = re.compile(r"^bit\s(?P<bit>[0-9])\s=\s(?P<description>.*)")
	bits_match = re.compile(r"(?i)^\s*bits\s*(?P<bits>[0-9]\:[0-9])(,?(?P<extrabit>[0-9]))?(\s=\s)?(?P<description>.*)")
	mask_match = re.compile(r"(?i)^(\s*)(?P<bits>[1|0]{2,8})\s=\s(?P<description>.*)")
	dac_match = re.compile(r"(?i)DAC Channel(\s*)(?P<channel>[A-D])(\s{3})((?P<address1>(0x([a-f|0-9]{2}))|\s{0,4})|(\s{0,1})$)?(\s?)((?P<address2>(0x([a-f|0-9]{2}))|\s{0,4})|(\s{0,1})$)?(\s?)((?P<address3>(0x([a-f|0-9]{2}))|\s{0,4})|(\s{0,1})$)?(\s?)((?P<address4>(0x([a-f|0-9]{2}))|\s{3})|(\s{0,1})$)?(\s?)((?P<address5>(0x([a-f|0-9]{2}))|\s{0,4})|(\s{0,1})$)?(\s?)((?P<address6>(0x([a-f|0-9]{2}))|\s{0,4})|(\s{0,1})$)?(\s?)((?P<address7>(0x([a-f|0-9]{2}))|\s{0,4})|(\s{0,1})$)?(\s?)")
	dac_value_match = re.compile(r"(?i)^(?P<value>[0-9]+)\s*=\s*(?P<name>.*)$")

	lineIndex = 0

	while lineIndex<len(lines):
		portMatch = port_match.match(lines[lineIndex])

		if portMatch:
			address = portMatch.group("address")
			name = portMatch.group("name")

			lineIndex = lineIndex + 1

			entry = {
				"address" : "0x"+address,
				"name" : name,
			}

			bitTable = []
			maskTable = []
			valueTable = []
			dacValues = []

			currentAccessMode = None
		
			while lineIndex<len(lines):
				bitMatch = bit_match.match(lines[lineIndex])
				bitsMatch = bits_match.match(lines[lineIndex])
				portMatch = port_match.match(lines[lineIndex])
				accessMatch = access_match.match(lines[lineIndex])
				maskMatch = mask_match.match(lines[lineIndex])
				dacMatch = dac_match.match(lines[lineIndex])
				dacValueMatch = dac_value_match.match(lines[lineIndex])

				flushMask = False

				if maskMatch:
					maskEntry = {
						"bits" : maskMatch.group("bits"),
						"description" : maskMatch.group("description")
					}

					maskTable.append(maskEntry);

				else:
					if len(maskTable):
						flushMask = True

				if portMatch:
					if len(maskTable):
						flushMask = True

				if accessMatch:
					if len(maskTable):
						flushMask = True

					currentAccessMode = accessMatch.group("access")

				if bitMatch:
					if len(maskTable):
						flushMask = True

					bitEntry = {
						"bit" : bitMatch.group("bit"),
						"access" : currentAccessMode,
						"descripton" : bitMatch.group("description")

					}

					bitTable.append(bitEntry)

				if bitsMatch:
					if len(maskTable):
						flushMask = True

					bitsArray = [
						bitsMatch.group("bits")
					]

					if bitsMatch.group("extrabit"):
						bitsArray.append("extrabit")

					bitsEntry = {
						"access" : currentAccessMode,
						"descripton" : bitsMatch.group("description"),
						"bits" : bitsArray
					}

					bitTable.append(bitsEntry)

				if dacMatch:
					registers = []

					for i in range(0,7):
						try:
							if dacMatch.group("address"+str(i)):
								value = dacMatch.group("address"+str(i)).lstrip().rstrip();

								if (len(value)):
									registerEntry = {
										"id" : str(i),
										"value" : value
									}

									registers.append(registerEntry)

						except IndexError:
							pass

					dacEntry = {
						"name": "DAC Channel "+dacMatch.group("channel"),
						"values" : registers
					}

					valueTable.append(dacEntry)

				if dacValueMatch:
					dacEntry = {
						"id": dacValueMatch.group("value"),
						"name" : dacValueMatch.group("name")
					}

					dacValues.append(dacEntry)

				if flushMask:
					bitsEntry["mask"] = maskTable
					maskTable = []

				if portMatch:
					break

				lineIndex = lineIndex+1	

			if len(bitTable):
				entry["fields"] = bitTable
			
			if len(valueTable):
				entry["names"] = dacValues
				entry["values"] = valueTable


			portsTable.append(entry)
		else:
			lineIndex = lineIndex + 1

	# a bit more specific expressions are needed to grab other information

	
	"""
	for line in lines:
		m = dac_match.match(line)

		if m:
			print(m.groups())
	"""

	return portsTable


def execute(command):
    output = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return(output.returncode, output.stdout.decode('utf-8'))

def which(appname):
    command = 'which'

    status, output = execute(f'{command} {appname}')

    if status and output:
        return(output.split()[0])

# application entry point

parser = argparse.ArgumentParser(description='Rainbow ZX Spectrum/Next development tool')

parser.add_argument('--download', type=str, nargs='?', help='Download the required source documents.')
parser.add_argument('--createjson', type=str, nargs='?', help='Generate the JSON document.')
parser.add_argument('-o','--output', type=str, nargs='?')

args = parser.parse_args()

curl = which('curl')

if curl:
	print('Fatal: curl is required but could not be found.')
	exit(1)

romTable = []
nextRegsTable = []
portsTable = []

if args.download:
	# prepare for download 

	if not os.path.exists("./sources"):
		os.makedirs("./sources")

	urlList = [
		"https://raw.githubusercontent.com/ZXSpectrumVault/rom-disassemblies/master/Spectrum%2048K/Spectrum48.asm",
		"https://raw.githubusercontent.com/ZXSpectrumVault/rom-disassemblies/master/Spectrum%20128K/Spectrum128_ROM1.asm",
		"https://raw.githubusercontent.com/ZXSpectrumVault/rom-disassemblies/master/Spectrum%20128K%20%2B3/Spectrum+3_V4-0_ROM2.asm",
		"https://gitlab.com/thesmog358/tbblue/-/raw/master/docs/nextzxos/NextZXOS_and_esxDOS_APIs.pdf",
		"https://gitlab.com/SpectrumNext/ZX_Spectrum_Next_FPGA/-/raw/master/cores/zxnext/nextreg.txt",
		"https://gitlab.com/SpectrumNext/ZX_Spectrum_Next_FPGA/-/raw/master/cores/zxnext/ports.txt"
	]

	# download required files from the url list

	for url in urlList:
		resultCode, resultOutput = execute(f'cd ./sources; curl -LJO {url}')

# use the 48K, 128K and +3 rom source files to extract the ROM function entry points.  Use the NextZXOS & esxDOS reference manual to get NEXT function entry ppints.

romTable += parseSource("./sources/Spectrum48.asm", "48K", 0x0000, "https://raw.githubusercontent.com/ZXSpectrumVault/rom-disassemblies")
romTable += parseSource('./sources/Spectrum128_ROM1.asm', "128K", 0x386E, "https://raw.githubusercontent.com/ZXSpectrumVault/rom-disassemblies")
romTable += parsePlus3Source("./sources/Spectrum+3_V4-0_ROM2.asm", "128K+3", "https://raw.githubusercontent.com/ZXSpectrumVault/rom-disassemblies")
romTable += parseNextDoc("./sources/NextZXOS_and_esxDOS_APIs.pdf", "NEXT", "https://gitlab.com/SpectrumNext")

# use the nextregs.txt file to obtain the NextReg definitions

nextRegsTable += parseNextRegs("./sources/nextreg.txt")

# +3 source has list of variables including 49K only, parse for complete list.

systemVariablesTable = parseSystemVariables("./sources/Spectrum+3_V4-0_ROM2.asm")

# scrape the Next ports

portsTable += parseNextPorts("./sources/ports.txt")

# create JSON output

doc = {
	"DETAILS": {
		"info":"this file was automatically generated using the rainbow tool.",
		"url":"https://github.com/fizzyade/rainbow",
		"created":str(datetime.datetime.now())
	},
	"ROM" : romTable,
	"NEXTREGS" : nextRegsTable,
	"SYSVARS" : systemVariablesTable,
	"PORTS" : portsTable
}

if args.output:
	sys.stdout = open(args.output, "w")

print(json.dumps(doc, indent=4))



